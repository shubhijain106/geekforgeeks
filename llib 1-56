

import java.io.*;
import java.util.*;


class coord
{
 int x;
 int y;
coord(int x,int y)
{
    this.x=x;
    this.y=y;
}
 static int getx(coord a)
{
 return a.x;   
}
 static int gety(coord a)
{
 return a.y;   
}

}
public class ll extends LinkedList
{
    void insertafternode(LinkedList lt,int data,int key)
    {
      if(lt.isEmpty()==true)
          lt.add(data);
      else
      {
        
        int i=0;
        while(key!=(int)lt.get(i))
        {
            i++;
        }
        lt.add(i+1,data); 
      }
        
      }
    void delete(LinkedList lt,int data)
    {
        int i=0;
        while(data!=(int)lt.get(i))
            i++;
        lt.remove(i);
    }
    
    void deleteatpos(LinkedList lt,int pos)  
    {
        int i=0;
        while(i!=pos)
            i++;
        lt.remove(i);
    }
    void swap(LinkedList lt,int n,int m)
    {
        int i=lt.indexOf(n);
        int j=lt.indexOf(m);
        
        if(i<j)
        {lt.remove(i);
        lt.remove(j-1);
        lt.add(i,m);
        lt.add(j,n);}
        else
        {
        lt.remove(j);
        lt.remove(i-1);
        lt.add(j,n);
        lt.add(i,m);  
        }
        
        
    }
    void reverse(LinkedList lt)
    {
      int k=0;
      int i=0;
      while(k<lt.size()/2)  
      {
          Object temp=lt.get(i);
          lt.set(i, lt.get(lt.size()-1-i));
          lt.set(lt.size()-1-i,temp );
          
          i++;
          k++;
      }
      
    }
    void merge(LinkedList lt,LinkedList lt2)
    {
        int i=0;
        int j=0;
     while( i<lt2.size() && j<lt.size())
     {
      if((int)lt.get(j)<(int)lt2.get(i))
      {
          j++;
      }
      else
       {
        lt.add(j,(int)lt2.get(i));
        i++;
       }
     }
     if(i+1!=lt2.size())
     {
         while(i<lt2.size())
         {lt.add(j,(int)lt2.get(i));
         i++;
         j++;}
     }
    }
    void middle(LinkedList lt)
    {
        int i=lt.size();
        System.out.println(lt.get(i/2));
    }
    void insertsorted(LinkedList lt,int key)
    {
       int  i=0;
       while(i<lt.size())
       {
           if((int)lt.get(i)<=key)
               i++;
           else
           {
               lt.add(i,key);
               break;
           }
           
       }
    }
    void checkpalindrome(LinkedList lt)
    {
       int i=0;
       while(i<lt.size()/2)
       {
           if((int)lt.get(i)==(int)lt.get(lt.size()-1-i))
               i++;
           else
           {
               System.out.println("no");
               break;
           }
       }
    }
    void findintersection(LinkedList lt,LinkedList lt2)
    {
      int c1=lt.size();
      int c2=lt2.size();
      int d=Math.abs(c2-c1);
      int i;
      int j;
      if(c1<c2)
      {
          i=0;
          j=d;
      }
      else
      {
          i=d;
          j=0;
      }
      while(i<lt.size()&& j<lt2.size())
      {
          if(lt.get(i)==lt2.get(j))
          {
              System.out.println((int)lt.get(i));
              break;
          }
          i++;
          j++;
      }
    }
    void removeduplicatesfromsorted(LinkedList lt)
    {
      int i=0;
      while(i<lt.size()-1)
      {
          if((int)lt.get(i)==(int)lt.get(i+1))
          {
            lt.remove(i+1);  
          }
          else
          {
              i++;
          }
      }
    }
    void removeduplicatesfromunsorted(LinkedList lt)
    {
       int i=0;
       Hashtable t=new Hashtable();
       while(i<lt.size())
       {
           if(t.containsKey((int)lt.get(i))==false)
           {
               System.out.println((int)lt.get(i));
               t.put((int)lt.get(i),true);
               i++;
           }
           else
           {
               lt.remove(i);
               
           }
           
       }
       
    }
    void pairwiseswap(LinkedList lt)
    {
      int i=0;
      int j=1;
      while(i<lt.size() && j<lt.size())
      {
         Object temp=lt.get(i);
         lt.set(i,lt.get(j));
         lt.set(j,temp);
         i=i+2;
         j=j+2;
      }
    }
    void movelasttofirst(LinkedList lt)
    {
     Object h=lt.get(lt.size()-1);
     lt.removeLast();
     lt.add(0,h);
    }
    void findintersectionlistfromsortedlists(LinkedList lt,LinkedList lt2)
    {
        LinkedList<Integer> lt3=new LinkedList<Integer>();
        int i=0;
        int j=0;
        while(i<lt.size() && j<lt2.size())
        {
            if((int)lt.get(i)<(int)lt2.get(j))
                i++;
            else if((int)lt.get(i)>(int)lt2.get(j))
                j++;
            else if((int)lt.get(i)==(int)lt2.get(j))
            {
                lt3.add((int)lt.get(i));
                i++;
                j++;
            }   
        }   
       System.out.println(lt3);
    }
    void deletealternate(LinkedList lt)
    {
        int i=0;
        while(i<lt.size()/2)
        {
            lt.remove(i+1);
            i++;
        }
    }
    void splitalternate(LinkedList lt)
    {
       LinkedList<Integer> lt3=new LinkedList<Integer>();
       int i=0;
       while(i<=lt.size()/2)
       {
           lt3.add((int)lt.get(i+1));
           lt.remove(i+1);
           i++;
       }
       System.out.println(lt3);
    }
    void reverseingroup(LinkedList lt,int key)
    {
        int i=0;
        while(i<lt.size())
        {
            int j=i;
            
            while(j<key/2)
            {
                Object a=lt.get(j);
                lt.set(j, lt.get(key-1-j));
                lt.set(key-1-j, a);
                j++;
            }
            i=j+key-1;
            key=2*key+i;
        }
    }
    void deletefromright(LinkedList lt)
    {
      int i=0;
      while(i<lt.size()-1)
      {
          System.out.println(lt.size());
          
          if((int)lt.get(i)<(int)lt.get(i+1))
              lt.remove(i);
          else
              i++;
      }
    }
    void splitoddeven(LinkedList lt)
    {
        int i=0;
        int k=lt.size();
        while(i<lt.size() && k>=0)
        {
          if((int)lt.get(i)%2==0)
              i++;
          else
          {
              lt.addLast((int)lt.get(i));
              lt.remove(i);
              
          }
          k--;
        }
    }
    void addlists(LinkedList lt,LinkedList lt2)
    {
      LinkedList<Integer> lt3=new LinkedList<Integer>(); 
      int i=0;
      int j=0;
      int carry=0;
      int sum;
      while(i<lt.size() && j<lt2.size())
      {
       sum=(int)lt.get(i)+(int)lt2.get(j)+carry;
       if(sum>9)
       {carry=1;
       sum=sum%10;
       }
       else
           carry=0;
       lt3.add(sum);
       i++;
       j++;
      }
      
      if(i<lt.size())
      {
        while(i<lt.size())
        {   sum=(int)lt.get(i)+carry;
            if(sum>9)
            {carry=1;
            sum=sum%10;
            }
            else
                carry=0;
            lt3.add(sum);
            i++;
        }
      }
       if(j<lt2.size())
      {
        while(i<lt2.size())
        {   sum=(int)lt2.get(j)+carry;
            if(sum>9)
            {carry=1;
            sum=sum%10;
            }
            else
                carry=0;
            lt3.add(sum);
            j++;
        }
      }
       System.out.println(lt3);
    }
    void unionintersection(LinkedList lt,LinkedList lt2)
    {
       LinkedList<Integer> lt4=new LinkedList<Integer>();
      LinkedList<Integer> lt3=new LinkedList<Integer>();
      HashSet h=new HashSet();
       int i=0;
       int j=0;
       while(i<lt.size())
       {
           if(h.contains(lt.get(i))==false)
               h.add(lt.get(i));
           i++;
       }
       while(j<lt2.size())
       {
           if(h.contains(lt2.get(j))==false)
             h.add(lt2.get(j));
           else
           lt3.add((int)lt2.get(j));
           j++;
       }
       System.out.println(lt3);
       Enumeration e=Collections.enumeration(h);
       while(e.hasMoreElements())
       {
          lt4.add((int)e.nextElement());
       }
       System.out.println(lt4);
       
    }
    void rotate(LinkedList lt,int k)
    {
      int j=0;
      while(j<k)
      {
         
          lt.add(lt.get(0));
          lt.remove(0);
          j++;
      }
    }
    void sort012(LinkedList lt)
    {
        int i=0;
        int c1=0;
        int c2=0;
        int c3=0;
        while(i<lt.size())
        {
            if((int)lt.get(i)==0)
                c1++;
            if((int)lt.get(i)==1)
                c2++;
            if((int)lt.get(i)==2)
                c3++;
            i++;
        }
        i=0;
        while(i<c1)
        {
            lt.set(i,0);
           
            i++;
        }
        int g=c2;
          while(g>0)
        {
            lt.set(i,1);
           
            i++;
            g--;
        }
         g=c3;
           while(g>0)
        {
            lt.set(i,2);
            
            i++;
            g--;
        }
        
    }
    void deletemaftern(LinkedList lt,int m,int n)
    {
       int i=0;
       while(i<lt.size())
       {
           for(int h=0;h<m;h++)
               i++;
           if(i>=lt.size())
               break;
           for(int h=0;h<n;h++)
           {
                if(i>=lt.size())
               break;
                lt.remove(i);
           }
           
           
       }
    }
    void alternateinsert(LinkedList lt,LinkedList lt2)
    {
        int i=0;
        int j=0;
        while(i<lt.size() && j<lt2.size())
        {
            lt.add(i+1,lt2.get(j));
            lt2.remove(j);
            i=i+2;
        }
        
    }
    void pairwiseswap2(LinkedList lt)
    {
        int i=0;
        while(i<lt.size()-1)
        {
            Object temp=lt.get(i);
            lt.set(i,lt.get(i+1));
            lt.set(i+1,temp);
            i=i+2;
        }
    }
    void removemiddlepoints(LinkedList lt)
    {
       int i=0;
       while(i<lt.size()-2)
       {
           if(coord.gety((coord)lt.get(i))==coord.gety((coord)lt.get(i+1)) && coord.gety((coord)lt.get(i))==coord.gety((coord)lt.get(i+2)) )
               lt.remove(i+1);
           else
               i++;
       }
       
    }
    void rearrange(LinkedList lt)
    {
    }
    void print(LinkedList lt)
    {
        ListIterator<coord> i= lt.listIterator();
        while(i.hasNext())
        {
            Object a=i.next();
            System.out.println(coord.getx((coord)a)+","+coord.gety((coord)a));
        }
        
    }
            public static void main(String[] args)
    {
//      LinkedList<Integer> lt=new LinkedList<Integer>();
//      LinkedList<Integer> lt2=new LinkedList<Integer>();
      LinkedList<coord> lt3=new LinkedList<coord>();
      lt3.add(new coord(0,10));
      lt3.add(new coord(1,10));
      lt3.add(new coord(5,10));
      lt3.add(new coord(7,10));
      lt3.add(new coord(7,5));
      lt3.add(new coord(20,5));
      lt3.add(new coord(40,5));
      ll t=new ll();
      
      t.print(lt3);
      t.removemiddlepoints(lt3);
      t.print(lt3);
//      lt.add(0);
//      lt.add(1);
//      lt.add(2);
//      lt.add(3);
//      lt.add(4);
//      lt2.add(5);
//      lt2.add(6);
//      lt2.add(7);
//      lt2.add(8);
//      lt2.add(9);
//      lt2.add(10);
//        System.out.println(lt);
        //System.out.println(lt2);
       // t.alternateinsert(lt,lt2);
//        t.pairwiseswap2(lt);
        //t.deletemaftern(lt,1,2);
         //t.rotate(lt,3);
       //  t.sort012(lt);
        //System.out.println(lt2);
      //t.unionintersection(lt,lt2);
//        System.out.println(lt);
          //System.out.println(lt2);
      //t.addlists(lt,lt2);
      //t.splitoddeven(lt);
      //t.deletefromright(lt);
      //t.reverseingroup(lt,3);
      //t.splitalternate(lt);
      //t.merge(lt,lt2);
      //t.insertsorted(lt,6);
      //t.removeduplicatesfromsorted(lt);
      //t.removeduplicatesfromunsorted(lt);
      //t.pairwiseswap(lt);
      //t.movelasttofirst(lt);
      //t.findintersectionlistfromsortedlists(lt,lt2);
      //t.deletealternate(lt);
      //t.checkpalindrome(lt);
      //t.findintersection(lt,lt2);
//t.delete(lt,4);
      //t.deleteatpos(lt,1);
      //t.swap(lt,3,2);
      //t.reverse(lt);
      //System.out.println(lt.size());
     // t.middle(lt);
    
      //System.out.println(lt2);
      
      
    }
}

