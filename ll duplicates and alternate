import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data=data;
        next=null;
    }
    
}
class LinkedList
{
    Node head;
    void insertatfront(int data)
    {
        Node nen=new Node(data);
        if(head==null)
        { head=nen;}
        else
        {
            Node temp=head;
            nen.next=temp;
            head=nen;
        }
    }
    void insertafternode(int data,int key)
    {
      if(head==null)
          return;
      else
      {
          Node nen=new Node(data);
          Node temp=head;
          while(key!=temp.data)
          {
              temp=temp.next;
          }
          Node p=temp.next;
          nen.next=p;
          temp.next=nen;
      }
    }
    void insertatend(int data)
    {
        Node nen=new Node(data);
        if(head==null)
            head=nen;
        else
        {
         Node temp=head;
         while(temp.next!=null)
         {
             temp=temp.next;
            
         }
         temp.next=nen;
        }
    }
    void delete(int data)
    {
        Node temp=head;
        while(temp.next.data!=data)
        {
            temp=temp.next;
        }
        temp.next=temp.next.next;
    }
    void deleteatpos(int pos)
    {
        int i=0;
        Node temp=head;
        while(i+1!=pos)
        { 
            i++;
            temp=temp.next;
        }
        temp.next=temp.next.next;
        
    }
    void size()
    {
        if(head==null)
            System.out.println(0);
        else
        {
            Node temp=head;
            int count=0;
            while(temp.next!=null)
            {
                count=count+1;
                temp=temp.next;
            }
            System.out.println(count);
        }
    }
    void swap(int n,int m)
    {
        Node temp=head;
        
        while(temp.next.data!=n)
            temp=temp.next;
        Node temp2=head;
        while(temp2.next.data!=m)
            temp2=temp2.next;
        
       if(temp.data==n)
       {head=temp2.next;}
       
           
           
       Node nn=temp.next;
        Node mm=temp2.next; 
        
        
        temp.next=mm;
        temp2.next=nn;
        Node nnext=nn.next;
        nn.next=mm.next;
        mm.next=nnext;
    }
    Node reverse(Node curr,Node prev)
    {
        Node next;
        
            next=curr.next;
            curr.next=prev;
          
            if(next!=null)
            {reverse(next,curr);
            }
            else
            {head=curr;
            }
     return head;       
    }
    void mergesorted(Node head1)
    {
        Node l1=head;
        Node l2=head1;
        Node prevl1=head;
        while(l1!=null && l2!=null)
        {
            if(l1.data<l2.data)
            {
                prevl1=l1;
                l1=l1.next;
            }
            else
            {
                if(l1==head)
                {
                    Node temp=l2.next;
                    l2.next=l1;
                    head=l2;
                    l1=l2;
                    l2=temp;
                    
                }
                else
               {
                   prevl1.next=l2;
                    Node temp=l2.next;
                    l2.next=l1;
                    prevl1=l2;
                    l2=temp;
               }
              
                
            }
        }
        if(l2!=null)
        {
            while(l2!=null)
            {
                prevl1.next=l2;
                prevl1=l2;
                l2=l2.next;
                
            }
        }
        
    }
    void middle()
    {
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
           
        }
        System.out.println(slow.data);
    }
    void detectloop()
    {
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null)
        {
            if(slow==fast)
            {
                System.out.println("loop");
                break;
            }
             slow=slow.next;
            fast=fast.next.next;
           
        }
        
    }
    void checkpalindrome()
    {
       printList();
       Node slow=head;
       Node fast=head;
       Node prev1=head;
      
       while(fast!=null && fast.next!=null)
        {
            prev1=slow;
            slow=slow.next;
            fast=fast.next.next;
            
        }
     if(fast!=null)
     {prev1=slow;
     slow=slow.next;
     }
     Node next;
       Node prev=null;
       Node curr=slow;
       while(curr!=null)
      {
       next=curr.next;
       curr.next=prev;
       prev=curr;
       curr=next;
      }
       prev1.next=prev;
       
       Node temp=head;
       while(prev!=null)
       {
           
          
           if(temp.data!=prev.data)
           {
             System.out.println("no"); 
             break;
           }
           temp=temp.next;
           prev=prev.next;
       }
    }
    void findintersection(Node head1)
    {
        Node s=head;
        Node p;
        int count=0;
        while(s!=null)
        {
         count++; 
         s=s.next;
        }
        s=head1;
        int count1=0;
        while(s!=null)
        {
         count1++; 
         s=s.next;
        }
       if(count<count1)
       {
           
           s=head1;
           p=head;
       }
       else
       {s=head;
       p=head1;}
           int d=Math.abs(count1-count);
           int i=1;
           while(i<=d)
           {
               i++;
               s=s.next;
           }
           System.out.println(s.data);
          while(s!=null && p!=null)
          {
              if(s==p)
              {
                  System.out.println(s.data);
                  break;
              }
              s=s.next;
              p=p.next;
          }
       }
    
    void printList()
    {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
        System.out.println();
    }
    void removeduplicatesfromsorted()
    {
        Node temp=head;
        Node p;
        while(temp.next!=null && temp.next.next!=null)
        {
            if(temp.data==temp.next.data)
            {
                temp.next=temp.next.next;
                
            }
            else
            {
            temp=temp.next;
            }
        }
    }
    void removeduplicatesfromunsorted()
    {
      Node temp=head;
      Hashtable t=new Hashtable();
      Node prev=head;
      while(temp!=null)
      {
         
         if(t.containsKey(temp.data)==false)
         { t.put(temp.data,true);
           prev=temp;
         }
         else
         {
             prev.next=temp.next;
         }
         
         temp=temp.next;
      }
      
    }
    void pairwiseswap()
    {
        Node temp=head;
        Node prev=null;
        while(temp!=null && temp.next!=null)
        { Node p=temp.next.next;
        temp.next.next=temp;
          if(temp==head)
          {
           head=temp.next;
          }
          else
          {prev.next=temp.next;}
          temp.next=p; 
          prev=temp;
          temp=temp.next;
        }
        
    }
    void movelasttofirst()
    {
        Node temp=head;
        while(temp.next.next!=null)
        {temp=temp.next;
        }
        Node h=temp.next;
        temp.next=null;
        h.next=head;
        head=h;
    }
    void findintersectionlistfromsortedlists(Node head1)
    {
        LinkedList ll3=new LinkedList();
        Node s=head;
        Node p=head1;
        Node prev=null;
        while(s!=null && p!=null)
        {
         if(s.data<p.data)
             s=s.next;
         else if(s.data>p.data)
             p=p.next;
         else if(s.data==p.data)
         {
             Node a=new Node(s.data);
             
             if(ll3.head==null)
             {ll3.head=a;
              }
             
             else
             { prev.next=a;}
              prev=a;
         s=s.next;
         p=p.next;
         }
        }
                
                
      ll3.printList();          
        
    }
    void deletealternate()
    {
      Node temp=head;
      while(temp!=null && temp.next!=null )
      {
       temp.next=temp.next.next;
       temp=temp.next;
      }
    }
    void splitalternate()
    {
         LinkedList ll3=new LinkedList();
        Node temp=head;
        Node prev=null;
        while(temp!=null && temp.next!=null)
        {
            Node p=new Node(temp.next.data);
            if(temp==head)
            {
                ll3.head=p;
                
            }
            else
            {prev.next=p;}
            temp.next=temp.next.next;
            temp=temp.next;
            
            prev=p;
            
        }
      ll3.printList();  
    }
    public static void main(String[] args)
    {
        LinkedList ll=new LinkedList();
        LinkedList ll2=new LinkedList();
        
        ll.insertatend(1);
        ll.insertatend(2);
        ll.insertatend(3);
        ll.insertatend(4);
        ll.insertatend(6);
        ll.insertatend(6);
        ll.insertatend(7);
        ll.insertatend(8);
        ll.printList();
        //ll.deletealternate();
        ll.splitalternate();
        ll.printList();
        //ll.removeduplicatesfromsorted();
        //ll.removeduplicatesfromunsorted();
        //ll.pairwiseswap();
        //ll.movelasttofirst();
        
        //ll.printList();
        
        ll2.head = new Node(2);
        Node a2 = new Node(4);
        Node a3 = new Node(6);
        Node a4 = new Node(8);
        Node a5 = new Node(10);
        Node a6 = new Node(12);
        ll2.head.next = a2;
        a2.next=a3;
        a3.next=a4;
        a4.next=a5;
        a5.next=a6;
        a6.next=null;
        //ll.findintersectionlistfromsortedlists(ll2.head);
        //ll2.printList();
        //ll.findintersection(ll2.head);
        //ll2.detectloop();
        //ll.mergesorted(ll2.head);
        //ll.swap(3, 5);
        //ll.middle();
        //ll.head=ll.reverse(ll2.head,null);
        //ll.printList();
        
    }
}