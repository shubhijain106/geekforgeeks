

import java.io.*;
import java.util.*;


public class ll extends LinkedList
{
    void insertafternode(LinkedList lt,int data,int key)
    {
      if(lt.isEmpty()==true)
          lt.add(data);
      else
      {
        
        int i=0;
        while(key!=(int)lt.get(i))
        {
            i++;
        }
        lt.add(i+1,data); 
      }
        
      }
    void delete(LinkedList lt,int data)
    {
        int i=0;
        while(data!=(int)lt.get(i))
            i++;
        lt.remove(i);
    }
    
    void deleteatpos(LinkedList lt,int pos)  
    {
        int i=0;
        while(i!=pos)
            i++;
        lt.remove(i);
    }
    void swap(LinkedList lt,int n,int m)
    {
        int i=lt.indexOf(n);
        int j=lt.indexOf(m);
        
        if(i<j)
        {lt.remove(i);
        lt.remove(j-1);
        lt.add(i,m);
        lt.add(j,n);}
        else
        {
        lt.remove(j);
        lt.remove(i-1);
        lt.add(j,n);
        lt.add(i,m);  
        }
        
        
    }
    void reverse(LinkedList lt)
    {
      int k=0;
      int i=0;
      while(k<lt.size()/2)  
      {
          Object temp=lt.get(i);
          lt.set(i, lt.get(lt.size()-1-i));
          lt.set(lt.size()-1-i,temp );
          
          i++;
          k++;
      }
      
    }
    void merge(LinkedList lt,LinkedList lt2)
    {
        int i=0;
        int j=0;
     while( i<lt2.size() && j<lt.size())
     {
      if((int)lt.get(j)<(int)lt2.get(i))
      {
          j++;
      }
      else
       {
        lt.add(j,(int)lt2.get(i));
        i++;
       }
     }
     if(i+1!=lt2.size())
     {
         while(i<lt2.size())
         {lt.add(j,(int)lt2.get(i));
         i++;
         j++;}
     }
    }
    
    public static void main(String[] args)
    {
      LinkedList<Integer> lt=new LinkedList<Integer>();
      LinkedList<Integer> lt2=new LinkedList<Integer>();
      
      lt.add(0,3);
      ll t=new ll();
      //t.insertafternode(lt,4,3);
      lt.addFirst(1);
      lt.addLast(5);
      lt.addLast(7);
      lt.addLast(8);
      lt2.add(0);
      lt2.add(4);
      lt2.add(9);
      lt2.add(10);
      t.merge(lt,lt2);
      //t.delete(lt,4);
      //t.deleteatpos(lt,1);
      //t.swap(lt,3,2);
      //t.reverse(lt);
      //System.out.println(lt.size());
      System.out.println(lt);
      System.out.println(lt2);
      
      
    }
}

