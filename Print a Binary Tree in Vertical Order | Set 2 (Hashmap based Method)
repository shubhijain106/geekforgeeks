



import java.io.*;
import java.util.*;
import java.math.BigInteger;
import java.util.Arrays;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
       this.data=data;
       left=null;
       right=null;
    }
}
class Solution {
    static TreeMap<Integer,String> ht=new TreeMap<Integer,String>();
   
    static void callbinarytreevertical(Node root,int hd)
    {
       
       
      if(root!=null)
       {
           binarytreevertical(root,hd);
           callbinarytreevertical(root.left,hd-1);
           callbinarytreevertical(root.right,hd+1);
          
       }
      
    }
    static void binarytreevertical(Node node,int hd)
    {
           if(ht.containsKey(hd)==false)
            ht.put(hd, Integer.toString(node.data));
           else
           {
               String s=ht.get(hd);
               s=s+" "+Integer.toString(node.data);
               ht.put(hd, s);
           }
           
    }
    static void print(TreeMap ht)
    {
        Set s=ht.keySet();
        Iterator it=s.iterator();
        while(it.hasNext())
        {
            int x=(int)it.next();
            System.out.println(ht.get(x));
        }
    }
  
  public static void main(String[] args)
  {
    Node root=new Node(1);
    root.left=new Node(2);
    root.right=new Node(3);
    root.left.left=new Node(4);
    root.left.right=new Node(5);
    root.right.left=new Node(6);
    root.right.right=new Node(7);
    root.right.right.right=new Node(9);
    root.right.left.right=new Node(8);
    callbinarytreevertical(root,0);
     print(ht);
  }
}