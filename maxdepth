

import java.io.*;
import java.util.*;


class Node
{
 int data;
 Node left;
 Node right;
Node(int data)
{
    this.data=data;
    left=right=null;
}
}
 
public class BinaryTree 
{
    Node root;
    
 
  int maxdepth(Node root)
  {
      if(root==null)
          return 0;
      else
      {
        int l=maxdepth(root.left);
        int r=maxdepth(root.right);
        
      if(l>r)
          return (l+1);
      else
          return (r+1);
      
  }
  }
  void print(Queue<Node> q)
  {
   Iterator iterator = q.iterator();
    while(iterator.hasNext()){
        Node a =(Node)iterator.next();
        System.out.print(a.data + " ");
}
   System.out.println();  
  }
            public static void main(String[] args)
    {
      BinaryTree tree=new BinaryTree();
      tree.root=new Node(1);
      tree.root.left=new Node(2);
      tree.root.right=new Node(3);
      tree.root.left.left=new Node(4);
      tree.root.left.right=new Node(5);
      //tree.root.right.left=new Node(6);
      tree.root.right.right=new Node(6);
      tree.root.left.right.left=new Node(7);
      tree.root.left.right.right=new Node(8);
      tree.root.right.right.left=new Node(9);
     
      BinaryTree tre=new BinaryTree();
      tre.root=new Node(1);
      tre.root.left=new Node(2);
      tre.root.right=new Node(3);
      tre.root.left.left=new Node(4);
      tre.root.left.right=new Node(5);
      //tre.root.right.left=new Node(6);
      tre.root.right.right=new Node(6);
      tre.root.left.right.left=new Node(7);
      tre.root.left.right.right=new Node(8);
      tre.root.right.right.left=new Node(9);
    
      System.out.println(tree.maxdepth(tree.root));
    }
}

