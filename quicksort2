import java.io.*;
import java.util.*;
import java.math.BigInteger;
import java.util.Arrays;

// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
   static void quicksort(int[] arr,int l,int r)
    {
       if(l<r)
       {
           int p=partition(arr,l,r);
           quicksort(arr,l,p-1);
           quicksort(arr,p+1,r);
       }
        
    }
    static int partition(int[] arr,int l,int r)
    {
      
       System.out.println(Arrays.toString(arr)); 
       int pivot=arr[l];
       int i=l+1;
       for(int j=l+1;j<=r;j++)
       {
          // System.out.println(Arrays.toString(arr)); 
           if(arr[j]<pivot)
         {
             
             int swap=arr[i];
             arr[i]=arr[j];
             arr[j]=swap;
             i++;
             
         }
       }
       int swap=arr[i-1];
       arr[i-1]=pivot;
       arr[l]=swap;
       
      System.out.println(Arrays.toString(arr));  
      return i-1;
    }
    
    
  public static void main(String[] args)
  {
      int[] arr={38,27,43,3,9,82,10};
       System.out.println(Arrays.toString(arr));
       quicksort(arr,0,arr.length-1);
        System.out.println(Arrays.toString(arr));
//     int[] kickerNumbers = new int[5];
//for(int i = 0; i < kickerNumbers.length; i++) {
//    kickerNumbers[i] = (int)(Math.random()*10+1);
//}
//      int x=70;
//      System.out.println(Arrays.toString(kickerNumbers));
//      Long l=System.currentTimeMillis();
//     mergesort(kickerNumbers,0,kickerNumbers.length-1);
//     System.out.println(Arrays.toString(kickerNumbers));
//      Long l1=System.currentTimeMillis();
//      System.out.println(l1-l);
//      if(s==1)
//          System.out.println("found");
//      else
//          System.out.println(" not found");
  }
}