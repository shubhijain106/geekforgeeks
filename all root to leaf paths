

import java.io.*;
import java.util.*;


class Node
{
 int data;
 Node left;
 Node right;
Node(int data)
{
    this.data=data;
    left=right=null;
}
}
 
public class BinaryTree 
{
    Node root;
    
 
  void printpathlength(Node root)
  {
      int path[]=new int[1000];
      getpath(root,path,0);
      
  }
  void getpath(Node root,int[] path,int pathlen)
  {
    if(root==null)  
        return ;
    
    path[pathlen]=root.data;
    pathlen++;
    if(root.left==null && root.right==null)
        printpath(path,pathlen);
    else
    {
        getpath(root.left,path,pathlen);
        getpath(root.right,path,pathlen);
    
    }
  }
  void inorder(Node root)
  {
      if(root==null)
          return;
      else
      {
          inorder(root.left);
          System.out.println(root.data);
          inorder(root.right);
          
      }
  }
  void printpath(int[] q,int n)
  {
   for(int i=0;i<n;i++)
   {
        System.out.print(q[i] + " ");
   }
   System.out.println();
   } 
  
            public static void main(String[] args)
    {
      BinaryTree tree=new BinaryTree();
      tree.root=new Node(1);
      tree.root.left=new Node(2);
      tree.root.right=new Node(3);
      tree.root.left.left=new Node(4);
      tree.root.left.right=new Node(5);
      //tree.root.right.left=new Node(6);
      tree.root.right.right=new Node(6);
      tree.root.left.right.left=new Node(7);
      tree.root.left.right.right=new Node(8);
      tree.root.right.right.left=new Node(9);
     
      BinaryTree tre=new BinaryTree();
      tre.root=new Node(1);
      tre.root.left=new Node(2);
      tre.root.right=new Node(3);
      tre.root.left.left=new Node(4);
      tre.root.left.right=new Node(5);
      //tre.root.right.left=new Node(6);
      tre.root.right.right=new Node(6);
      tre.root.left.right.left=new Node(7);
      tre.root.left.right.right=new Node(8);
      tre.root.right.right.left=new Node(9);
     tree.inorder(tree.root);
             tree.printpathlength(tree.root);
              tree.inorder(tree.root);
    }
}

