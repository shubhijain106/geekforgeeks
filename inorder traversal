

import java.io.*;
import java.util.*;


class Node
{
 int data;
 Node left;
 Node right;
Node(int data)
{
    this.data=data;
    left=right=null;
}
}
 
public class BinaryTree 
{
    Node root;
    
 
  void inordertraversal()
  {
      Stack<Node> s=new Stack<Node>();
      
      Node temp=root;
      while(temp!=null)
      {
          s.push(temp.left);
          temp=temp.left;
      }
      //System.out.println(curr.data);
      while(!s.isEmpty())
      {
         System.out.println(s.size());
         temp=s.pop();
         System.out.println(temp.data);
          if(temp.right!=null)
          {
            temp=temp.right;
          }
          while(temp!=null)
          {
           s.push(temp); 
           temp=temp.left;
          }
      }
      
  }
  void print(Queue<Node> q)
  {
   Iterator iterator = q.iterator();
    while(iterator.hasNext()){
        Node a =(Node)iterator.next();
        System.out.print(a.data + " ");
}
   System.out.println();  
  }
            public static void main(String[] args)
    {
      BinaryTree tree=new BinaryTree();
      tree.root=new Node(1);
      tree.root.left=new Node(2);
      tree.root.right=new Node(3);
      tree.root.left.left=new Node(4);
      tree.root.left.right=new Node(5);
      //tree.root.right.left=new Node(6);
      tree.root.right.right=new Node(6);
      tree.root.left.right.left=new Node(7);
      tree.root.left.right.right=new Node(8);
      tree.root.right.right.left=new Node(9);
      tree.inordertraversal();
    }
}

